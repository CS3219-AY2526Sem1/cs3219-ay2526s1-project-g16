name: user-service â†’ GCE VM

on:
  push:
    branches: [ "master" ]
    paths:
      - 'backend/user-service/**'
      - '.github/workflows/deploy-userservice.yml'
  pull_request:
    branches: [ "master" ]
    paths:
      - 'backend/user-service/**'
      - '.github/workflows/deploy-userservice.yml'
  workflow_dispatch:

env:
  REGION: asia-southeast1
  PROJECT_ID: agile-charger-472814-j0
  REPO: my-docker-repo
  IMAGE: user-service
  CONTEXT_DIR: backend/user-service

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          install_components: 'beta'

      - name: Configure Docker for GAR
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Build & tag image
        run: |
          IMAGE_URI=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO }}/${{ env.IMAGE }}
          docker build "${{ env.CONTEXT_DIR }}" \
            -t $IMAGE_URI:sha-${{ github.sha }} \
            -t $IMAGE_URI:latest
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Push image
        if: github.event_name != 'pull_request'   # ðŸ‘ˆ skip pushing during PR tests
        run: |
          docker push $IMAGE_URI:sha-${{ github.sha }}
          docker push $IMAGE_URI:latest 

  deploy:
    needs: build-and-push
    if: github.event_name != 'pull_request'       # ðŸ‘ˆ only deploy after merge/main/manual run
    runs-on: ubuntu-latest
    steps:
      - name: SSH to VM & deploy
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          port: ${{ secrets.VM_PORT || 22 }}
          script: |
            set -e
            cd ~/appD
            docker compose pull
            docker compose up -d
            docker image prune -f --filter "until=24h"