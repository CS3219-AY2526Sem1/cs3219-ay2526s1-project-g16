/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UnauthenticatedRouteRouteImport } from './routes/_unauthenticated/route'
import { Route as AuthenticatedRouteRouteImport } from './routes/_authenticated/route'
import { Route as AuthenticatedIndexRouteImport } from './routes/_authenticated/index'
import { Route as UnauthenticatedRegisterRouteImport } from './routes/_unauthenticated/register'
import { Route as UnauthenticatedLoginRouteImport } from './routes/_unauthenticated/login'
import { Route as AuthenticatedManageQuestionsRouteImport } from './routes/_authenticated/manage-questions'

const UnauthenticatedRouteRoute = UnauthenticatedRouteRouteImport.update({
  id: '/_unauthenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRouteRoute = AuthenticatedRouteRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedIndexRoute = AuthenticatedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const UnauthenticatedRegisterRoute = UnauthenticatedRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => UnauthenticatedRouteRoute,
} as any)
const UnauthenticatedLoginRoute = UnauthenticatedLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => UnauthenticatedRouteRoute,
} as any)
const AuthenticatedManageQuestionsRoute =
  AuthenticatedManageQuestionsRouteImport.update({
    id: '/manage-questions',
    path: '/manage-questions',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/manage-questions': typeof AuthenticatedManageQuestionsRoute
  '/login': typeof UnauthenticatedLoginRoute
  '/register': typeof UnauthenticatedRegisterRoute
  '/': typeof AuthenticatedIndexRoute
}
export interface FileRoutesByTo {
  '/manage-questions': typeof AuthenticatedManageQuestionsRoute
  '/login': typeof UnauthenticatedLoginRoute
  '/register': typeof UnauthenticatedRegisterRoute
  '/': typeof AuthenticatedIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authenticated': typeof AuthenticatedRouteRouteWithChildren
  '/_unauthenticated': typeof UnauthenticatedRouteRouteWithChildren
  '/_authenticated/manage-questions': typeof AuthenticatedManageQuestionsRoute
  '/_unauthenticated/login': typeof UnauthenticatedLoginRoute
  '/_unauthenticated/register': typeof UnauthenticatedRegisterRoute
  '/_authenticated/': typeof AuthenticatedIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/manage-questions' | '/login' | '/register' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/manage-questions' | '/login' | '/register' | '/'
  id:
    | '__root__'
    | '/_authenticated'
    | '/_unauthenticated'
    | '/_authenticated/manage-questions'
    | '/_unauthenticated/login'
    | '/_unauthenticated/register'
    | '/_authenticated/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthenticatedRouteRoute: typeof AuthenticatedRouteRouteWithChildren
  UnauthenticatedRouteRoute: typeof UnauthenticatedRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_unauthenticated': {
      id: '/_unauthenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof UnauthenticatedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_unauthenticated/register': {
      id: '/_unauthenticated/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof UnauthenticatedRegisterRouteImport
      parentRoute: typeof UnauthenticatedRouteRoute
    }
    '/_unauthenticated/login': {
      id: '/_unauthenticated/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof UnauthenticatedLoginRouteImport
      parentRoute: typeof UnauthenticatedRouteRoute
    }
    '/_authenticated/manage-questions': {
      id: '/_authenticated/manage-questions'
      path: '/manage-questions'
      fullPath: '/manage-questions'
      preLoaderRoute: typeof AuthenticatedManageQuestionsRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
  }
}

interface AuthenticatedRouteRouteChildren {
  AuthenticatedManageQuestionsRoute: typeof AuthenticatedManageQuestionsRoute
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
}

const AuthenticatedRouteRouteChildren: AuthenticatedRouteRouteChildren = {
  AuthenticatedManageQuestionsRoute: AuthenticatedManageQuestionsRoute,
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
}

const AuthenticatedRouteRouteWithChildren =
  AuthenticatedRouteRoute._addFileChildren(AuthenticatedRouteRouteChildren)

interface UnauthenticatedRouteRouteChildren {
  UnauthenticatedLoginRoute: typeof UnauthenticatedLoginRoute
  UnauthenticatedRegisterRoute: typeof UnauthenticatedRegisterRoute
}

const UnauthenticatedRouteRouteChildren: UnauthenticatedRouteRouteChildren = {
  UnauthenticatedLoginRoute: UnauthenticatedLoginRoute,
  UnauthenticatedRegisterRoute: UnauthenticatedRegisterRoute,
}

const UnauthenticatedRouteRouteWithChildren =
  UnauthenticatedRouteRoute._addFileChildren(UnauthenticatedRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRouteRoute: AuthenticatedRouteRouteWithChildren,
  UnauthenticatedRouteRoute: UnauthenticatedRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
